{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/contact-view/contact-view.component.css","webpack:///./src/app/contact-view/contact-view.component.html","webpack:///./src/app/contact-view/contact-view.component.ts","webpack:///./src/app/contactinfo.service.ts","webpack:///./src/app/dashboard/dashboard.component.css","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/newcontact/newcontact.component.css","webpack:///./src/app/newcontact/newcontact.component.html","webpack:///./src/app/newcontact/newcontact.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from \"./login/login.component\";\r\nimport { DashboardComponent } from \"./dashboard/dashboard.component\";\r\n\r\nconst appRoutes: Routes = [\r\n    {\r\n      path: 'login',\r\n      component: LoginComponent\r\n    },\r\n    {\r\n        path: 'dashboard',\r\n        component: DashboardComponent\r\n    }\r\n  ];\r\n  \r\n@NgModule({\r\n    imports : [\r\n        RouterModule.forRoot(\r\n            appRoutes\r\n        )\r\n    ],\r\n    exports : [\r\n        RouterModule\r\n    ],\r\n    providers : [\r\n     //   CanDeactivateGuard\r\n    ]\r\n})\r\nexport class AppRoutingModule{\r\n\r\n}\r\n\r\n","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n<div style=\\\"text-align:center\\\">\\r\\n    \\r\\n  <h1>\\r\\n   navigation bar comming soon....\\r\\n  </h1>\\r\\n  \\r\\n</div>\\r\\n\\r\\n<div>\\r\\n    <a routerLink=\\\"/login\\\" >Login</a>\\r\\n    <a routerLink=\\\"/dashboard\\\" >Dashboard</a>\\r\\n    \\r\\n    <router-outlet></router-outlet>\\r\\n</div>\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule  } from '@angular/forms';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { MatTableModule, MatPaginatorModule, MatTabsModule, MatListModule, MatStepperModule,MatButtonModule, MatCardModule, MatToolbarModule, MatCheckboxModule, MatIconModule, MatFormFieldModule ,MatInputModule} from '@angular/material';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpModule } from '@angular/http';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { DashboardComponent } from \"./dashboard/dashboard.component\";\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { NewcontactComponent } from './newcontact/newcontact.component';\r\nimport { ContactViewComponent } from './contact-view/contact-view.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    DashboardComponent,\r\n    NewcontactComponent,\r\n    ContactViewComponent\r\n  ],\r\n  imports: [\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    BrowserModule,\r\n    MatFormFieldModule,\r\n    FormsModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n   \r\n    MatCheckboxModule,\r\n    MatIconModule,\r\n    MatTableModule,\r\n    MatToolbarModule,\r\n    ReactiveFormsModule,\r\n    MatStepperModule,\r\n    MatListModule,\r\n    MatPaginatorModule,\r\n    MatTabsModule,\r\n    HttpModule\r\n  ],\r\n  exports: [\r\n    RouterModule,\r\n    MatFormFieldModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n \r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatCheckboxModule,\r\n    MatTabsModule,\r\n    MatListModule\r\n\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\"","module.exports = \"<div>\\n  <mat-card>\\n\\n    <mat-card-title>\\n     \\n    </mat-card-title>\\n    <mat-card-content>\\n      <!--          <mat-form-field>\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n</mat-form-field>-->\\n\\n\\n      <div class=\\\"mat-elevation-z8\\\">\\n        <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\n\\n          <!-- ID Column -->\\n          <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\\n            <td mat-cell *matCellDef=\\\"let row\\\"> {{row.id}} </td>\\n          </ng-container>\\n\\n          <!-- Name Column -->\\n          <ng-container matColumnDef=\\\"Name\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\n            <td mat-cell *matCellDef=\\\"let row\\\"> {{row.firstName}} </td>\\n          </ng-container>\\n\\n          <!-- Color Column -->\\n          <ng-container matColumnDef=\\\"Email\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Email </th>\\n            <td mat-cell *matCellDef=\\\"let row\\\"> {{row.email}} </td>\\n          </ng-container>\\n\\n          <!-- Color Column -->\\n          <ng-container matColumnDef=\\\"Status\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Status </th>\\n            <td mat-cell *matCellDef=\\\"let row\\\"> {{row.status}} </td>\\n          </ng-container>\\n          <!-- Color Column -->\\n          <ng-container matColumnDef=\\\"Contact No\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Contact No. </th>\\n            <td mat-cell *matCellDef=\\\"let row\\\"> {{row.contactNo}} </td>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"Action\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Action </th>\\n            <td mat-cell *matCellDef=\\\"let row\\\">\\n              <button mat-raised-button>Delete</button>\\n            </td>\\n          </ng-container>\\n\\n          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\">\\n          </tr>\\n        </table>\\n      </div>\\n    </mat-card-content>\\n    <mat-card-actions>\\n      <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\n    </mat-card-actions>\\n  </mat-card>\\n</div>\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator, MatSort, MatTableDataSource } from '@angular/material';\nimport { ContactinfoService} from '../contactinfo.service'\nimport { EmployeeData } from '../model/employee'\n/** Constants used to fill up our data base. */\nconst COLORS: string[] = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst NAMES: string[] = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\nconst STATUS: string[] = [\"ACTIVE\", \"INACTIVE\"];\n@Component({\n  selector: 'app-contact-view',\n  templateUrl: './contact-view.component.html',\n  styleUrls: ['./contact-view.component.css']\n})\n\nexport class ContactViewComponent implements OnInit {\n  displayedColumns: string[] = ['id', 'Name', 'Email', 'Contact No', 'Status', 'Action'];\n  dataSource: MatTableDataSource<EmployeeData>;\n  contactInfo: EmployeeData[];\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(private contactInfoService:ContactinfoService) {\n    const users = Array.from({ length: 100 }, (_, k) => createNewUser(k + 1));\n\n    // Assign the data to the data source for the table to render\n  //  this.dataSource = new MatTableDataSource(users);\n  //  console.log(this.dataSource);\n  }\n\n  ngOnInit() {\n    \n    this.dataSource = new MatTableDataSource(this.getContactInfo());\n    console.log(this.dataSource);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  getContactInfo(): EmployeeData[] {\n    return this.contactInfoService.getContactInfo();\n    \n  }\n}\nfunction createNewUser(id: number): EmployeeData {\n  const firstName =\n    NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n    NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n  const lasttName =\n    COLORS[Math.round(Math.random() * (COLORS.length - 1))] + ' ' +\n    COLORS[Math.round(Math.random() * (COLORS.length - 1))].charAt(0) + '.';\n  const status =\n    STATUS[Math.round(Math.random() * (STATUS.length - 1))] + ' ' +\n    STATUS[Math.round(Math.random() * (STATUS.length - 1))].charAt(0) + '.';\n  return {\n    id: id.toString(),\n    firstName: firstName,\n    lastName: lasttName,\n    email: \"email\",\n    status: status,\n    contactNo: 1234568\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { EmployeeData } from './model/employee'\nimport { Http } from '../../node_modules/@angular/http';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactinfoService {\n  contactInfo :EmployeeData[];\n  constructor(private http:Http) {\n    this.initContactInfo();\n   }\n\n  initContactInfo():void{\n    this.contactInfo\n    let url=\"/api/v1/contactlist\";\n    this.http.get(url).subscribe(res=>{\n      this.contactInfo = JSON.parse(res.text());\n      console.log(res.text())\n    });\n  }\n  getContactInfo():EmployeeData[]{\n    return this.contactInfo;\n   // return [new EmployeeData(\"1\",\"A\",\"V\",\"asd@qwe\",12312,\"active\")];\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"dashboard-container\\\">\\r\\n  Dashboard Component\\r\\n  <mat-tab-group>\\r\\n        <mat-tab label=\\\"Contact List\\\">\\r\\n          <ng-template matTabContent>\\r\\n            <app-contact-view></app-contact-view>\\r\\n          </ng-template>\\r\\n        </mat-tab>\\r\\n        <mat-tab label=\\\"Add Contact\\\">\\r\\n          <ng-template matTabContent>            \\r\\n            <app-newcontact></app-newcontact>\\r\\n          </ng-template>\\r\\n        </mat-tab>\\r\\n      </mat-tab-group>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { Http } from '../../../node_modules/@angular/http';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  constructor(private http:Http) { }\r\n\r\n  ngOnInit() {\r\n    let url=\"https://api.mlab.com/api/1/databases/multivision1/collections/messages?apiKey=qA7GGPzDgWBrG-oOxfIqF36Kyt710ufD\";\r\n    this.http.get(url).subscribe(res=>console.log(res.text()));\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container loginContainer\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n     \\r\\n      <form #userlogin = \\\"ngForm\\\" (ngSubmit) = \\\"authenticate(userlogin.value)\\\" >\\r\\n  <label for=\\\"username\\\" >User Name :</label>\\r\\n    <input type=\\\"text\\\" name=\\\"username\\\" id=\\\"username\\\" ngModel/>\\r\\n    <label for=\\\"password\\\" >Password :</label>\\r\\n    <input type=\\\"password\\\" name=\\\"password\\\" id=\\\"password\\\" ngModel/>\\r\\n    <button mat-raised-button type=\\\"submit\\\" value=\\\"Login\\\">Login</button>\\r\\n </form>\\r\\n <label for=\\\"\\\">{{loginStatus}}</label>\\r\\n  </div>\\r\\n\\r\\n  \\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormControl, Validators} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  userName = \"admin\";\r\n  password = \"admin\";\r\n  loginStatus ;\r\n \r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  authenticate(loginData ){\r\n    console.log(loginData);\r\n      if(this.userName.match(loginData.userName) && this.password.match(loginData.password)){\r\n        this.loginStatus = \"Success\";\r\n      }else{\r\n        this.loginStatus = \"Failed !!\";        \r\n      }\r\n\r\n  }\r\n  getErrorMessage(){\r\n    return \"Incorrect EmailId\";\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"new-contact-container\\\">\\n    <mat-card>\\n        <mat-card-title>\\n            Create New Contact\\n        </mat-card-title>\\n        <mat-card-content>\\n       <form #userlogin = \\\"ngForm\\\" >    \\n                <input type = \\\"text\\\" name = \\\"firstName\\\" placeholder = \\\"First Name\\\" ngModel>\\n                <br/>\\n                <input type = \\\"text\\\" name = \\\"lastName\\\" placeholder = \\\"Last Name\\\" ngModel>\\n                <br/>\\n                <input type = \\\"email\\\" name = \\\"email\\\" placeholder = \\\"Email Id\\\" ngModel>\\n                <br/>\\n                <input type = \\\"text\\\" name = \\\"contactno\\\" placeholder = \\\"Contact No\\\" ngModel>\\n                <br/>\\n                <input type = \\\"text\\\" name = \\\"department\\\" placeholder = \\\"Department\\\" ngModel>\\n                <br/>\\n        </form>\\n        </mat-card-content>\\n        <mat-card-actions>\\n          <button mat-raised-button>\\n            Clear\\n          </button>\\n          <button mat-raised-button (click) = \\\"addContact(userlogin.value)\\\">\\n              Save\\n            </button>\\n        </mat-card-actions>\\n        <mat-card-footer>\\n          Contact Added Successfully\\n        </mat-card-footer>\\n    </mat-card>\\n  </div>\\n\"","import { Component, OnInit } from '@angular/core';\n\nclass Employee{\n  firstName:string;\n  lastName:string;\n  email:string;\n  contactno:number;\n  department:string;\n  status:string;\n}\n\n@Component({\n  selector: 'app-newcontact',\n  templateUrl: './newcontact.component.html',\n  styleUrls: ['./newcontact.component.css']\n})\n\nexport class NewcontactComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n \n  addContact(data){\n    console.log(data);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}